// Generated by CoffeeScript 1.9.0
var AmdClientResource, ClientLib, Resource, client, fs, generatedAmdClient, path, requireConfig, requirejs, resourcesOnStart, streamBuffers, util, _;

path = require('path');

util = require('util');

fs = require('fs');

_ = require('lodash');

streamBuffers = require('stream-buffers');

requirejs = require('requirejs');

Resource = require(path.normalize(require.main.paths[0] + "/deployd/lib/resource"));

ClientLib = require(path.normalize(require.main.paths[0] + "/deployd/lib/resources/client-lib"));

client = null;

resourcesOnStart = null;

requireConfig = {
  baseUrl: path.normalize(__dirname + "/clib"),
  name: "dpd",
  out: path.normalize(__dirname + "/clib/dpdAmd.js"),
  optimize: "none",
  paths: {
    "ayepromise": "ayepromise.min",
    "socket.io": "socket.io.min"
  }
};

generatedAmdClient = function(cb) {
  var resource, server, writable;
  server = process.server;
  client = new ClientLib('dpdAmd.js', {
    config: {
      resources: server.resources
    },
    server: server
  });
  resourcesOnStart = (function() {
    var _i, _len, _ref, _results;
    _ref = server.resources;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resource = _ref[_i];
      _results.push(resource.name);
    }
    return _results;
  })();
  writable = new streamBuffers.WritableStreamBuffer();
  return client.generate(writable, function() {
    var collectionMethods, dpdLibPath, originalClib;
    originalClib = writable.getContentsAsString("utf8");
    collectionMethods = originalClib.split("// automatically generated code")[1];
    writable.destroy();
    dpdLibPath = path.join(__dirname, 'clib/dpdOriginal.js');
    return fs.readFile(dpdLibPath, 'utf-8', function(err, data) {
      var amdClib, clibParts, part1, part2;
      clibParts = data.split("// generatedCodeMarker");
      part1 = clibParts[0], part2 = clibParts[1];
      amdClib = "" + part1 + collectionMethods + part2;
      fs.writeFileSync(path.normalize(__dirname + "/clib/dpd.js"), amdClib);
      return requirejs.optimize(requireConfig, function(buildResponse) {
        if (cb) {
          return cb();
        }
      });
    });
  });
};

process.server.on("listening", function() {
  return generatedAmdClient();
});

AmdClientResource = (function() {
  function AmdClientResource() {
    Resource.apply(this, arguments);
    return;
  }

  return AmdClientResource;

})();

util.inherits(AmdClientResource, Resource);

AmdClientResource.label = "Amd client";

AmdClientResource.prototype.clientGeneration = false;

AmdClientResource.prototype.handle = function(ctx, next) {
  var resource, resources, sendAmdFile, server;
  if (ctx.method === "GET") {
    server = process.server;
    resources = (function() {
      var _i, _len, _ref, _results;
      _ref = server.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        _results.push(resource.name);
      }
      return _results;
    })();
    sendAmdFile = function() {
      var readStream, stat;
      stat = fs.statSync(requireConfig.out);
      ctx.res.setHeader('Content-Type', 'text/javascript');
      ctx.res.setHeader('Content-Length', stat.size);
      readStream = fs.createReadStream(requireConfig.out);
      return readStream.pipe(ctx.res);
    };
    if (_.isEqual(resourcesOnStart, resources)) {
      sendAmdFile();
    } else {
      generatedAmdClient(sendAmdFile);
    }
  } else {
    next();
  }
};

module.exports = AmdClientResource;
